"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["9038"],{73156:function(e,t,n){n.r(t),n.d(t,{metadata:()=>s,contentTitle:()=>r,default:()=>h,assets:()=>l,toc:()=>o,frontMatter:()=>a});var s=JSON.parse('{"id":"dev/internals/zstdelta","title":"ZstDelta","description":"ZstDelta uses zstd dictionary compression to calculate","source":"@site/docs/dev/internals/zstdelta.md","sourceDirName":"dev/internals","slug":"/dev/internals/zstdelta","permalink":"/docs/dev/internals/zstdelta","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/sapling/tree/main/website/docs/dev/internals/zstdelta.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Visibility and mutation","permalink":"/docs/dev/internals/visibility-and-mutation"},"next":{"title":"FAQs","permalink":"/docs/faqs"}}'),d=n("85893"),i=n("50065");let a={},r="ZstDelta",l={},o=[{value:"ZstDelta",id:"zstdelta-1",level:2},{value:"ZStore",id:"zstore",level:2}];function c(e){let t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(t.header,{children:(0,d.jsx)(t.h1,{id:"zstdelta",children:"ZstDelta"})}),"\n",(0,d.jsxs)(t.p,{children:["ZstDelta uses ",(0,d.jsx)(t.a,{href:"http://www.zstd.net",children:"zstd"})," dictionary compression to calculate\na compressed delta between two inputs."]}),"\n",(0,d.jsx)(t.h2,{id:"zstdelta-1",children:"ZstDelta"}),"\n",(0,d.jsxs)(t.p,{children:["The ",(0,d.jsx)(t.code,{children:"zstdelta"})," Rust library provides ",(0,d.jsx)(t.code,{children:"diff"})," and ",(0,d.jsx)(t.code,{children:"apply"})," to calculate such\ncompressed deltas and restore content from deltas. You can get ",(0,d.jsx)(t.code,{children:"delta"})," from\n",(0,d.jsx)(t.code,{children:"diff(a, b)"}),", then restore the content of ",(0,d.jsx)(t.code,{children:"b"})," using ",(0,d.jsx)(t.code,{children:"apply(a, delta)"}),"."]}),"\n",(0,d.jsxs)(t.p,{children:["In Python, ",(0,d.jsx)(t.code,{children:"bindings.zstd"})," provides access to the ",(0,d.jsx)(t.code,{children:"diff"})," and ",(0,d.jsx)(t.code,{children:"apply"})," functions:"]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-with-output",children:">>> import bindings, hashlib\n>>> a = b\"\".join(hashlib.sha256(str(i).encode()).digest() for i in range(1000))\n>>> len(a)\n32000\n>>> b = a[:10000] + b'x' * 10000 + a[11000:]\n>>> diff = bindings.zstd.diff(a, b)\n>>> len(diff)\n29\n>>> bindings.zstd.apply(a, diff) == b\nTrue\n\n"})}),"\n",(0,d.jsx)(t.h2,{id:"zstore",children:"ZStore"}),"\n",(0,d.jsxs)(t.p,{children:["The ",(0,d.jsx)(t.code,{children:"zstore"})," Rust library provides an on-disk content store with internal\ndelta-chain management. It uses the above ",(0,d.jsx)(t.code,{children:"zstdelta"})," library for delta\ncalculation and ",(0,d.jsx)(t.a,{href:"/docs/dev/internals/indexedlog",children:"IndexedLog"})," for on-disk storage. It is used by\n",(0,d.jsx)(t.a,{href:"/docs/dev/internals/metalog",children:"MetaLog"}),"."]})]})}function h(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return r},a:function(){return a}});var s=n(67294);let d={},i=s.createContext(d);function a(e){let t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);