"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["7469"],{91455:function(e,n,t){t.r(n),t.d(n,{metadata:()=>o,contentTitle:()=>d,default:()=>l,assets:()=>i,toc:()=>c,frontMatter:()=>r});var o=JSON.parse('{"id":"commands/unamend","title":"unamend","description":"unamend | una","source":"@site/docs/commands/unamend.md","sourceDirName":"commands","slug":"/commands/unamend","permalink":"/docs/commands/unamend","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/sapling/tree/main/website/docs/commands/unamend.md","tags":[],"version":"current","sidebarPosition":42,"frontMatter":{"sidebar_position":42},"sidebar":"tutorialSidebar","previous":{"title":"status","permalink":"/docs/commands/status"},"next":{"title":"uncommit","permalink":"/docs/commands/uncommit"}}'),s=t("85893"),a=t("50065");let r={sidebar_position:42},d=void 0,i={},c=[{value:"unamend | una",id:"unamend--una",level:2}];function m(e){let n={code:"code",h2:"h2",p:"p",strong:"strong",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"unamend--una",children:"unamend | una"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"undo the last amend operation on the current commit"})}),"\n",(0,s.jsxs)(n.p,{children:["Reverse the effects of an ",(0,s.jsx)(n.code,{children:"sl amend"})," operation. Hides the current commit\nand checks out the previous version of the commit. ",(0,s.jsx)(n.code,{children:"sl unamend"})," does not\nrevert the state of the working copy, so changes that were added to the\ncommit in the last amend operation become pending changes in the working\ncopy."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"sl unamend"})," cannot be run on amended commits that have children. In\nother words, you cannot unamend an amended commit in the middle of a\nstack."]}),"\n",(0,s.jsxs)(n.p,{children:["Running ",(0,s.jsx)(n.code,{children:"sl unamend"})," is similar to running ",(0,s.jsx)(n.code,{children:"sl undo --keep"}),"\nimmediately after ",(0,s.jsx)(n.code,{children:"sl amend"}),". However, unlike ",(0,s.jsx)(n.code,{children:"sl undo"}),", which can\nonly undo an amend if it was the last operation you performed,\n",(0,s.jsx)(n.code,{children:"sl unamend"})," can unamend any draft amended commit in the graph that\ndoes not have children."]}),"\n",(0,s.jsxs)(n.p,{children:["Although ",(0,s.jsx)(n.code,{children:"sl unamend"})," is typically used to reverse the effects of\n",(0,s.jsx)(n.code,{children:"sl amend"}),", it actually rolls back the current commit to its previous\nversion, regardless of whether the changes resulted from an ",(0,s.jsx)(n.code,{children:"sl amend"}),"\noperation or from another operation. We disallow ",(0,s.jsx)(n.code,{children:"sl unamend"})," if the\npredecessor's parents don't match the current commit's parents to avoid\nunexpected behavior after, for example, ",(0,s.jsx)(n.code,{children:"sl rebase"}),"."]})]})}function l(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return d},a:function(){return r}});var o=t(67294);let s={},a=o.createContext(s);function r(e){let n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);