"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["6012"],{93593:function(e,t,n){n.r(t),n.d(t,{metadata:()=>o,contentTitle:()=>a,default:()=>h,assets:()=>l,toc:()=>d,frontMatter:()=>s});var o=JSON.parse('{"id":"dev/internals/metalog","title":"MetaLog","description":"MetaLog is used to track lightweight repo metadata like bookmarks, remote","source":"@site/docs/dev/internals/metalog.md","sourceDirName":"dev/internals","slug":"/dev/internals/metalog","permalink":"/docs/dev/internals/metalog","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/sapling/tree/main/website/docs/dev/internals/metalog.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"LineLog","permalink":"/docs/dev/internals/linelog"},"next":{"title":"Visibility and mutation","permalink":"/docs/dev/internals/visibility-and-mutation"}}'),r=n("85893"),i=n("50065");let s={},a="MetaLog",l={},d=[{value:"Background",id:"background",level:2},{value:"MetaLog",id:"metalog-1",level:2},{value:"Structure",id:"structure",level:3},{value:"Concurrent writes",id:"concurrent-writes",level:3},{value:"Usage in Sapling",id:"usage-in-sapling",level:2},{value:"Integration with transaction",id:"integration-with-transaction",level:3},{value:"Source of truth",id:"source-of-truth",level:3},{value:"Other storage data",id:"other-storage-data",level:3},{value:"Write order",id:"write-order",level:4},{value:"Export to Git",id:"export-to-git",level:3}];function c(e){let t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"metalog",children:"MetaLog"})}),"\n",(0,r.jsx)(t.p,{children:"MetaLog is used to track lightweight repo metadata like bookmarks, remote\nbookmarks, visible heads, etc. It makes atomic updates possible, and allows\nviewing past states for debugging and undoing."}),"\n",(0,r.jsx)(t.h2,{id:"background",children:"Background"}),"\n",(0,r.jsx)(t.p,{children:"Historically, repo metadata like bookmarks, remote bookmarks, and phases are\nstored in separate files. Because reading is designed to be lock-free, and the\nfilesystem is not transactional, updating these files is not atomic and readers\nmight see inconsistent state where some files are updated but others aren't.\nThis requires careful design of file write order to reduce issues. The write\norder can be subtle and fragile to maintain."}),"\n",(0,r.jsx)(t.p,{children:"The other motivation is to help debug user issues. Sometimes it's really\nhelpful to understand what happened in the past. Metalog tracks this historical\ndata to answer questions like how and when bookmarks changed, etc."}),"\n",(0,r.jsx)(t.h2,{id:"metalog-1",children:"MetaLog"}),"\n",(0,r.jsx)(t.h3,{id:"structure",children:"Structure"}),"\n",(0,r.jsx)(t.p,{children:"MetaLog maintains 2 structures:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["A blob store backed by ",(0,r.jsx)(t.a,{href:"/docs/dev/internals/zstdelta#zstore",children:"ZStore"}),". Blobs are keyed by their\ncontent SHA1s. There are 2 kinds of blobs: root, and content."]}),"\n",(0,r.jsx)(t.li,{children:"A log of keys of roots. It provides a way to get the latest root, and also\nhistorical roots."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"A root blob contains:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"A description of why this root was created."}),"\n",(0,r.jsx)(t.li,{children:"A map from (file) names to keys of content blobs."}),"\n",(0,r.jsx)(t.li,{children:"Keys of parent roots."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"You might notice that MetaLog is kind of like a lightweight source control system\nitself. That is part of the reason for the naming."}),"\n",(0,r.jsx)(t.h3,{id:"concurrent-writes",children:"Concurrent writes"}),"\n",(0,r.jsxs)(t.p,{children:["Similar to ",(0,r.jsx)(t.a,{href:"/docs/dev/internals/indexedlog#concurrent-writes",children:"IndexedLog"}),", changes are buffered\nin memory until an explicit flush to disk."]}),"\n",(0,r.jsx)(t.p,{children:"Unlike IndexedLog, if MetaLog notices that the latest root is changed on disk,\nit will attempt to perform a merge defined using a merge function specified by\nthe application. A merge failure will prevent MetaLog from committing the\nchanges to disk."}),"\n",(0,r.jsx)(t.p,{children:"This means the application might not need extra locking, instead relying on\nMetaLog's merge feature to detect races."}),"\n",(0,r.jsx)(t.h2,{id:"usage-in-sapling",children:"Usage in Sapling"}),"\n",(0,r.jsx)(t.h3,{id:"integration-with-transaction",children:"Integration with transaction"}),"\n",(0,r.jsx)(t.p,{children:"In Sapling, code like:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'with repo.lock(), repo.transaction("transaction-name") as tr:\n    ...\n'})}),"\n",(0,r.jsx)(t.p,{children:"Reloads the latest MetaLog root at the beginning of the transaction, and writes\nchanges back to disk at end of the transaction."}),"\n",(0,r.jsx)(t.h3,{id:"source-of-truth",children:"Source of truth"}),"\n",(0,r.jsx)(t.p,{children:"To avoid invalidation issues, if performance allows, avoid storing states from\nthe MetaLog:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"class Repo:\n    def __init__(self):\n        self._foo = None\n\n    def foo(self):\n        # Fragile: Requires extra effort to ensure repo._foo is always synced\n        # with source of truth.\n        if self._foo is None:\n            self._foo = decode_foo(self.metalog()['foo'])\n        return self._foo\n\n    def foo(self):\n        # Less fragile: foo() is always synced with metalog source of truth.\n        return decode_foo(self.metalog()['foo'])\n"})}),"\n",(0,r.jsx)(t.h3,{id:"other-storage-data",children:"Other storage data"}),"\n",(0,r.jsx)(t.p,{children:"MetaLog is only intended to store lightweight metadata that deltas very well."}),"\n",(0,r.jsx)(t.p,{children:"There are other kinds of data that are not so lightweight. For example, files,\ntrees, commits, and mutation records."}),"\n",(0,r.jsx)(t.p,{children:"Sapling's strategy to maintain consistency is to ensure orphaned data in the\nheavywight storage won't visibly affect the user experience. For example,"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Files or Trees: If there are unused files or trees stored, they do not\naffect the output of ",(0,r.jsx)(t.code,{children:"sl"})," or ",(0,r.jsx)(t.code,{children:"status"}),", etc. They are simply not referred to."]}),"\n",(0,r.jsx)(t.li,{children:"Commits: Similarly, if there are extra commits stored in the commit graph,\nthey are invisible because they are not referred to by visible heads or\nbookmarks. The orphaned commits are transparent to common commands."}),"\n",(0,r.jsxs)(t.li,{children:["Mutation Records: If there are unused mutation records, since the successors\nare invisible, the records are simply ignored. It will not turn a commit\nfrom ",(0,r.jsx)(t.code,{children:"o"})," to ",(0,r.jsx)(t.code,{children:"x"})," in ",(0,r.jsx)(t.code,{children:"log -G"})," output."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"This means that Sapling can just flush these kinds of data without going\nthrough MetaLog, and there is no need to undo or truncate them to a previous\nstate."}),"\n",(0,r.jsx)(t.h4,{id:"write-order",children:"Write order"}),"\n",(0,r.jsx)(t.p,{children:"Write MetaLog last. MetaLog tracks references to other data."}),"\n",(0,r.jsx)(t.p,{children:"Different kinds of data have dependencies. This requires a write order.\nCommits refer to trees. Trees refer to files. Bookmarks in MetaLog refer to\ncommits."}),"\n",(0,r.jsx)(t.p,{children:"If MetaLog is written before writing commits, it might refer to unknown\ncommits and cause issues."}),"\n",(0,r.jsx)(t.p,{children:"Whether commits or trees are written first does not matter, since there are no\nreferences to them and they are just unused data described above."}),"\n",(0,r.jsx)(t.h3,{id:"export-to-git",children:"Export to Git"}),"\n",(0,r.jsx)(t.p,{children:"You can export MetaLog content to a Git repo:"}),"\n",(0,r.jsx)(t.p,{children:"sl debugexportmetalog /path/to/git-repo"}),"\n",(0,r.jsxs)(t.p,{children:["From there you can run commands like ",(0,r.jsx)(t.code,{children:"git annotate remotenames"})," and\n",(0,r.jsx)(t.code,{children:"git log -p remotenames"})," to see what commands changed a specific remote bookmark\nand when."]})]})}function h(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return a},a:function(){return s}});var o=n(67294);let r={},i=o.createContext(r);function s(e){let t=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);