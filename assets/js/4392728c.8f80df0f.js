"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["4758"],{92782:function(e,n,s){s.r(n),s.d(n,{metadata:()=>t,contentTitle:()=>d,default:()=>h,assets:()=>c,toc:()=>l,frontMatter:()=>r});var t=JSON.parse('{"id":"dev/process/writing_tests","title":"Writing Tests","description":"For different languages, or purposes, there are different ways to write tests.","source":"@site/docs/dev/process/writing_tests.md","sourceDirName":"dev/process","slug":"/dev/process/writing_tests","permalink":"/docs/dev/process/writing_tests","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/sapling/tree/main/website/docs/dev/process/writing_tests.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Process","permalink":"/docs/category/process"},"next":{"title":"Internals","permalink":"/docs/category/internals"}}'),i=s("85893"),o=s("50065");let r={},d="Writing Tests",c={},l=[{value:"<code>.t</code> Tests",id:"t-tests",level:2},{value:"Basic",id:"basic",level:3},{value:"Best practice",id:"best-practice",level:3},{value:"Recommended test setup",id:"recommended-test-setup",level:4},{value:"Create a new repo for each sub-test-case",id:"create-a-new-repo-for-each-sub-test-case",level:4},{value:"Running tests against Watchman or EdenFS",id:"running-tests-against-watchman-or-edenfs",level:4},{value:"Silence uninteresting output",id:"silence-uninteresting-output",level:4},{value:"Use drawdag to create commits",id:"use-drawdag-to-create-commits",level:4},{value:"Avoid depending on context",id:"avoid-depending-on-context",level:4},{value:"Advanced features",id:"advanced-features",level:3},{value:"Test environment",id:"test-environment",level:4},{value:"Conditional logic",id:"conditional-logic",level:4},{value:"Multiple test cases",id:"multiple-test-cases",level:4},{value:"Hybrid Python code blocks",id:"hybrid-python-code-blocks",level:4},{value:"Processing previous command output in Python",id:"processing-previous-command-output-in-python",level:4},{value:"Matching dynamic output",id:"matching-dynamic-output",level:4},{value:"Available commands and binaries",id:"available-commands-and-binaries",level:4},{value:"Test-level settings",id:"test-level-settings",level:4},{value:"Rust tests",id:"rust-tests",level:2},{value:"Python tests",id:"python-tests",level:2}];function a(e){let n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"writing-tests",children:"Writing Tests"})}),"\n",(0,i.jsx)(n.p,{children:"For different languages, or purposes, there are different ways to write tests."}),"\n",(0,i.jsxs)(n.p,{children:["Unit tests, and doctests are generally good choices for Rust. The\n",(0,i.jsx)(n.code,{children:"sapling/"})," Python API is not stable, and things are coupled too much\n(ex. the Python bookmark store ",(0,i.jsx)(n.code,{children:"bmstore"})," object cannot be created without an\nrepo object). Therefore Python unit tests only make more sense for logic\nthat is relatively independent."]}),"\n",(0,i.jsxs)(n.p,{children:["Sapling also has a unique kind of tests - ",(0,i.jsx)(n.code,{children:".t"})," tests. It is a good fit for\ntesting end-user command-line experience."]}),"\n",(0,i.jsxs)(n.h2,{id:"t-tests",children:[(0,i.jsx)(n.code,{children:".t"})," Tests"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:".t"})," tests live in ",(0,i.jsx)(n.code,{children:"tests/"}),". They can be run by\n",(0,i.jsx)(n.code,{children:"run-tests.py <.t file name>"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"basic",children:"Basic"}),"\n",(0,i.jsx)(n.p,{children:"Each test looks like indented blocks of bash scripts with commentary.\nFor example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Test 'echo' works. This line is a comment.\n\n  $ echo A\n  A\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The test engine will execute ",(0,i.jsx)(n.code,{children:"echo A"})," and verify its output is ",(0,i.jsx)(n.code,{children:"A"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:".t"})," format also supports multi-line commands, Python scripts and\ntesting exit code:"]}),"\n",(0,i.jsx)(n.p,{children:"Multi-line commands (with heredoc):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"  $ sha1sum << EOF\n  > hello\n  > EOF\n  f572d396fae9206628714fb2ce00f72e94f2258f\n"})}),"\n",(0,i.jsx)(n.p,{children:"Python code blocks:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'  >>> import sys\n  >>> for i in "hello world".split():\n  ...     sys.stdout.write("%s\\n" % i)\n  hello\n  world\n'})}),"\n",(0,i.jsx)(n.p,{children:"Exit code can be tested using [code]:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"  $ false\n  [1]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To get started with creating a test, you can set ",(0,i.jsx)(n.code,{children:"PS1='$ '"})," in your shell\nand experiment with the reproducing commands. When done, just copy them to\na ",(0,i.jsx)(n.code,{children:".t"})," file and prefix them with two spaces."]}),"\n",(0,i.jsxs)(n.p,{children:["You can also just edit the ",(0,i.jsx)(n.code,{children:"$"})," command lines in ",(0,i.jsx)(n.code,{children:"test-foo.t"})," directly, and\nuse ",(0,i.jsx)(n.code,{children:"run-tests.py -i test-foo.t"})," to fill in the output. This is also a good\nway to edit tests."]}),"\n",(0,i.jsx)(n.h3,{id:"best-practice",children:"Best practice"}),"\n",(0,i.jsx)(n.h4,{id:"recommended-test-setup",children:"Recommended test setup"}),"\n",(0,i.jsx)(n.p,{children:"tl;dr: Write tests as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"  $ newclientrepo <<'EOS'\n  > B\n  > |\n  > A\n  > EOS\n\nThis is a comment\n  $ touch something\n  $ hg st # this is another comment\n  ? something\n  $ hg go $A -q\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["The recommended way to create new repos is to use ",(0,i.jsx)(n.code,{children:"newclientrepo"})]}),"."]}),"\n",(0,i.jsx)(n.p,{children:"By default new tests test against:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Sapling without Watchman"}),"\n",(0,i.jsx)(n.li,{children:"Sapling and Watchman"}),"\n",(0,i.jsx)(n.li,{children:"Sapling and EdenFS"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If it's necessary to specify just one of them, ",(0,i.jsx)(n.code,{children:"#require eden"})," / ",(0,i.jsx)(n.code,{children:"#require no-eden"})," / ",(0,i.jsx)(n.code,{children:"#require fsmonitor"})," / ",(0,i.jsx)(n.code,{children:"#require no-fsmonitor"}),"\ncan be added at the top of the file for specifying only one of them."]}),"\n",(0,i.jsx)(n.h4,{id:"create-a-new-repo-for-each-sub-test-case",children:"Create a new repo for each sub-test-case"}),"\n",(0,i.jsxs)(n.p,{children:["Creating a new repo is a very cheap operation and can help untangle future\nissues caused by overusing the same one. It's possible to specify the names of\nnew repos when using ",(0,i.jsx)(n.code,{children:"newclientrepo"}),"; the name of the server for the repo can\nalso be specified. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"  $ newclientrepo\n  $ pwd # the name of the repo is repo<N> by default\n  $TESTTMP/repo1\n  $ hg config paths.default # similarly, the repo names are repo<N>\n  test:repo1_server\n"})}),"\n",(0,i.jsx)(n.h4,{id:"running-tests-against-watchman-or-edenfs",children:"Running tests against Watchman or EdenFS"}),"\n",(0,i.jsxs)(n.p,{children:["Currently these two can only be run through Buck. ",(0,i.jsx)(n.code,{children:"-"})," and ",(0,i.jsx)(n.code,{children:"."})," in test names have\nto be converted to ",(0,i.jsx)(n.code,{children:"_"}),". For instance,"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Runs test-rust-checkout.t with Watchman enabled\n$ buck2 test '@fbcode//mode/opt' :hg_watchman_run_tests -- test_rust_checkout_t\n\n# Runs test-rust-checkout.t with EdenFS enabled\n$ buck2 test '@fbcode//mode/opt' :hg_edenfs_run_tests -- test_rust_checkout_t\n"})}),"\n",(0,i.jsxs)(n.p,{children:["On EdenFS tests the EdenFS CLI is available through the ",(0,i.jsx)(n.code,{children:"eden"})," command; it's\nrecommended for new repos (cloned or newly created) to be created through\n",(0,i.jsx)(n.code,{children:"newclientrepo"}),". See the previous section for an example on how to do this."]}),"\n",(0,i.jsx)(n.h4,{id:"silence-uninteresting-output",children:"Silence uninteresting output"}),"\n",(0,i.jsxs)(n.p,{children:["Not all output is interesting to the test. For example, when testing\n",(0,i.jsx)(n.code,{children:"hg log"}),", the output of ",(0,i.jsx)(n.code,{children:"hg update"})," is not interesting. Use ",(0,i.jsx)(n.code,{children:"-q"}),"\nto silence it"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"  $ hg update -q commit-x\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This makes the test cleaner and easier to codemod ",(0,i.jsx)(n.code,{children:"update"})," output."]}),"\n",(0,i.jsx)(n.p,{children:"Similarity, avoid testing revision numbers, or branch names, if they are not\ninteresting to the test. It will make deprecation of those features easier."}),"\n",(0,i.jsx)(n.h4,{id:"use-drawdag-to-create-commits",children:"Use drawdag to create commits"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"hg debugdrawdag"})," (or ",(0,i.jsx)(n.code,{children:"drawdag"})," defined in ",(0,i.jsx)(n.code,{children:"tinit.sh"}),") can be used to\ncreate commits in a more readable, and efficient way. ",(0,i.jsx)(n.code,{children:"newclientrepo"})," (also\ndefined on ",(0,i.jsx)(n.code,{children:"tinit.sh"}),") can also take the same input as ",(0,i.jsx)(n.code,{children:"drawdag"}),". See\n",(0,i.jsx)(n.a,{href:"/docs/dev/internals/drawdag",children:"the drawdag page"})," for more info."]}),"\n",(0,i.jsx)(n.h4,{id:"avoid-depending-on-context",children:"Avoid depending on context"}),"\n",(0,i.jsx)(n.p,{children:"As the test file grows longer, it could become difficult to follow or modify.\nIt's often caused by commands depending on the context (ex. the current repo\nstate, or the current directory) and the context is not obvious by just\nreading the code. Here are some tips to make tests easier to understand:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Avoid ",(0,i.jsx)(n.code,{children:".."})," in filesystem paths. Instead of ",(0,i.jsx)(n.code,{children:"cd ../repo1"}),",\nuse ",(0,i.jsx)(n.code,{children:"cd $TESTTMP/repo1"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Avoid using a list of ",(0,i.jsx)(n.code,{children:"hg commit"}),", ",(0,i.jsx)(n.code,{children:"hg update"})," to create a repo.\nUse drawdag if possible. If drawdag cannot be used, insert a ",(0,i.jsx)(n.code,{children:"hg log -G"}),"\ncommand to print the repo content out."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"advanced-features",children:"Advanced features"}),"\n",(0,i.jsx)(n.h4,{id:"test-environment",children:"Test environment"}),"\n",(0,i.jsxs)(n.p,{children:["A test starts inside a temporary directory, which can be obtained using\n",(0,i.jsx)(n.code,{children:"TESTTMP"})," environment variable. The ",(0,i.jsx)(n.code,{children:"TESTDIR"})," environment variable contains\nthe path to the ",(0,i.jsx)(n.code,{children:"tests/"})," directory, which can be handy to refer to other\nscripts."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tests/tinit.sh"})," is sourced. Functions defined in it can be used to make\ntests shorter. For example"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Use functions in tinit.sh:\n  $ setconfig lfs.url=file://$TESTTMP/lfs lfs.threshold=10B\n  $ enable lfs rebase\n  $ newrepo\n"})}),"\n",(0,i.jsx)(n.p,{children:"Equivalent to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"  $ cat >> $HGRCPATH << EOF\n  > [extensions]\n  > lfs=\n  > rebase=\n  > [lfs]\n  > url=file://$TESTTMP/lfs\n  > threshold=10B\n  > EOF\n  $ hg init repo1\n  $ cd repo1\n"})}),"\n",(0,i.jsxs)(n.p,{children:["A particularly important function is ",(0,i.jsx)(n.code,{children:"newclientrepo"}),". It also allows specifying\ndifferent repo and server names:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"  $ newclientrepo foo\n  $ newclientrepo bar test:customservername\n  $ cd $TESTTMP/foo # this goes back to the foo repo\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Similarly, there are some default Sapling configs defined in\n",(0,i.jsx)(n.code,{children:"tests/default_hgrc.py"}),". These defaults change depending on whether tests are\ncompatible with ",(0,i.jsx)(n.code,{children:"debugruntest"})," or not."]}),"\n",(0,i.jsx)(n.h4,{id:"conditional-logic",children:"Conditional logic"}),"\n",(0,i.jsxs)(n.p,{children:["Certain tests might require some features (ex. POSIX, case insensitive\nfilesystem, or certain programs to be installed). Run ",(0,i.jsx)(n.code,{children:"python tests/hghave --list"})," to get a list of features that can be tested. Example use in ",(0,i.jsx)(n.code,{children:".t"}),"\nlooks like"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"#require fsmonitor icasefs\nThe test will be skipped if any of the requirement is not satisfied.\n\n#if symlink\nThis block is skipped if symlink is not supported.\n  $ ln -s a b\n#else\nThis block is skipped if symlink is supported.\n  $ cp a b\n#endif\n"})}),"\n",(0,i.jsx)(n.p,{children:'"If" statements can be nested as well and multiple statements can be put in a\nsingle statement:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"#if symlink no-osx\nThis block will only be run if symlinks are supported and macOS is not being used\n  $ ln -s a b\n\n#if execbit\nThis block will only be run if symlinks are supported, macOS is not being used, and execbit is supported\n  $ chmod +x a\n#endif\n\n#else\nThis block will only be run if symlinks are not supported or macOS is being used\n  $ cp a b\n#endif\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Features can be prefixed with ",(0,i.jsx)(n.code,{children:"no-"})," meaning it should not be selected"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"#require no-fsmonitor\nSkip this test on 'run-tests.py --watchman'.\n"})}),"\n",(0,i.jsx)(n.h4,{id:"multiple-test-cases",children:"Multiple test cases"}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes it's feasible to reuse the most of the test code for different code\npaths. ",(0,i.jsx)(n.code,{children:"#testcases"})," can be used to define test case names that can be used\nfor feature testing"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"#testcases innodb rocksdb\n\n#if innodb\n  $ setconfig db.engine=inno\n#else\n  $ setconfig db.engine=rocks\n#endif\n"})}),"\n",(0,i.jsx)(n.p,{children:"This runs the test once for each test case."}),"\n",(0,i.jsx)(n.h4,{id:"hybrid-python-code-blocks",children:"Hybrid Python code blocks"}),"\n",(0,i.jsxs)(n.p,{children:["If using ",(0,i.jsx)(n.code,{children:"debugruntest"}),", it's possible to combine Python code blocks with\nshell-like input. For instance,"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    if True:\n      $ echo 1\n      1\n"})}),"\n",(0,i.jsx)(n.h4,{id:"processing-previous-command-output-in-python",children:"Processing previous command output in Python"}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes it can be useful to process some command's output on Python rather\nthan just to expect some value. If ",(0,i.jsx)(n.code,{children:"debugruntest"})," is used, last command's output\ncan is stored in the ",(0,i.jsx)(n.code,{children:"_"})," variable in Python. For example,"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'  $ echo 123\n  123\n  >>> _ == "123\\n"\n  True\n  >>> assert _ == "True\\n"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"matching-dynamic-output",children:"Matching dynamic output"}),"\n",(0,i.jsxs)(n.p,{children:["To filter noisy output that changes on each run (ex. timestamps), use glob\npatterns and put a space and ",(0,i.jsx)(n.code,{children:"(glob)"})," at the end of the output line"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"  $ hg parents -r null --time\n  time: real * secs (user * sys *) (glob)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the same vein, regular expressions can be also used with ",(0,i.jsx)(n.code,{children:"(re)"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'  $ echo "   3"\n  \\s*3 (re)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Escape sequences can be expected as well:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'  $ hg debugtemplate \'{label(\\"test.test\\", \\"output\\n\\")}\' --config color.test.test=blue\n  \\x1b[34moutput\\x1b[39m (esc)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can match different output based on which features are available. Use\n",(0,i.jsx)(n.code,{children:"(feature-name !)"})," to mark a line as required if the feature was turned on,\nor optional otherwise."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"  $ hg debugfsinfo | grep eden\n  fstype: eden (eden !)\n"})}),"\n",(0,i.jsx)(n.p,{children:'More than one feature can be expected here (all of them will be "and"-end), and\nglobs can be used as well:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'  $ hg go $B\n  update failed to remove foo: Can\'t remove file "*foo": The process cannot access the file because it is being used by another process. (os error 32)! (glob) (windows !) (no-eden !)\n  2 files updated, 0 files merged, 1 files removed, 0 files unresolved\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"(?)"})," to mark output as optional unconditionally"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"  $ maybe-output-foobar\n  foobar (?)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["There is an additional mechanism for matching output more or less arbitrarily;\nthis is done through ",(0,i.jsx)(n.code,{children:"registerfallbackmatch"}),", and this is what ",(0,i.jsx)(n.code,{children:".t"})," tests to be\nok with non-EdenFS and EdenFS outputs from ",(0,i.jsx)(n.code,{children:"hg goto"}),". That makes"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"  $ hg goto foo\n  2 files updated, 0 files merged, 1 files removed, 0 files unresolved\n"})}),"\n",(0,i.jsx)(n.p,{children:"work without having to resort to"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"#if no-eden\n  $ hg goto foo\n  2 files updated, 0 files merged, 1 files removed, 0 files unresolved\n#else\n  $ hg goto foo\n  update complete\n#endif\n"})}),"\n",(0,i.jsx)(n.h4,{id:"available-commands-and-binaries",children:"Available commands and binaries"}),"\n",(0,i.jsxs)(n.p,{children:["For making a test only run if a certain binary is available, the ",(0,i.jsx)(n.code,{children:"#require"}),"\nstatements, ",(0,i.jsx)(n.code,{children:"#if"})," blocks, or ",(0,i.jsx)(n.code,{children:"( !)"})," line matching can be used. For instance,"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"#require git\n\n  $ git --version | wc -l 1\n  1\n\n#if node\n  $ node --version | wc -l 1\n  1\n#endif\n\n  $ lldb -P 2>&1 | wc -l 1\n  1 (lldb !)\n  [255] (no-lldb !)\n"})}),"\n",(0,i.jsx)(n.p,{children:"As mentioned previously, there are two different engines for .t tests."}),"\n",(0,i.jsxs)(n.p,{children:["On the old test engine, commands are run using Bash on macOS and Linux, and\nall usual commands (",(0,i.jsx)(n.code,{children:"ls"}),", ",(0,i.jsx)(n.code,{children:"echo"}),") are the ones that the new test engine\nimplements. For other binaries (e.g., ",(0,i.jsx)(n.code,{children:"git"}),", ",(0,i.jsx)(n.code,{children:"unzip"}),", etc.) the ones provided\nby the system are used; whichever commands are in ",(0,i.jsx)(n.code,{children:"PATH"})," can actually be used."]}),"\n",(0,i.jsxs)(n.p,{children:["In the case of ",(0,i.jsx)(n.code,{children:"debugruntest"})," tests, Bash is not actually used and Shell\nbuiltins / coreutils are implemented by the test runner. Additionally, certain\ncommands such as ",(0,i.jsx)(n.code,{children:"unzip"})," are actually implemented within the test runner itself.\nThis is done for improving compatibility with non-POSIX OSes and for performance\nreasons."]}),"\n",(0,i.jsx)(n.h4,{id:"test-level-settings",children:"Test-level settings"}),"\n",(0,i.jsx)(n.p,{children:"Currently we have four test-level settings:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"#debugruntest-incompatible"})," :: Makes the test use the legacy test engine."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"#inprocess-hg-incompatible"})," :: To be used on ",(0,i.jsx)(n.code,{children:"debugruntest"})," tests. Without\nthis, a new Sapling process is used every time Sapling is invoked in ",(0,i.jsx)(n.code,{children:".t"}),"\ntests. There are a few more caveats, see the documentation under\n",(0,i.jsx)(n.code,{children:"scm/sapling/testing"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"#chg-compatible"})," ::  To be used on non-",(0,i.jsx)(n.code,{children:"debugruntest"})," tests. This is similar\nto ",(0,i.jsx)(n.em,{children:"not"})," using ",(0,i.jsx)(n.code,{children:"#inprocess-hg-incompatible"})," from above, making ",(0,i.jsx)(n.code,{children:".t"})," tests use\nthe ",(0,i.jsx)(n.code,{children:"chg"})," daemon for Sapling processes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"#modern-config-incompatible"})," :: Only compatible with ",(0,i.jsx)(n.code,{children:"debugruntest"})," tests and\n",(0,i.jsx)(n.strong,{children:"not"}),"* intended te be used on new tests. This exists for legacy reasons,\nmaking tests use much older configs by default."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"rust-tests",children:"Rust tests"}),"\n",(0,i.jsx)(n.p,{children:"Follow the Rust community standard."}),"\n",(0,i.jsx)(n.p,{children:"For modules that are likely to be used by other developers, Rustdoc is a good\nchoice to show examples about how to use a function. Especially when it's not\nobvious."}),"\n",(0,i.jsx)(n.p,{children:"For native Rust code, prefer unit tests inside modules"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"/* module code */\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_feature_x() {\n        assert!(...);\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"tests/"})," for independent integration tests, and ",(0,i.jsx)(n.code,{children:"benches/"})," for\nbenchmarks."]}),"\n",(0,i.jsx)(n.h2,{id:"python-tests",children:"Python tests"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"run-tests.py"})," supports not only ",(0,i.jsx)(n.code,{children:".t"})," tests, but also standard Python unit\ntests in ",(0,i.jsx)(n.code,{children:".py"})," files. See ",(0,i.jsx)(n.code,{children:"test-lock.py"})," for an example."]}),"\n",(0,i.jsxs)(n.p,{children:["Python functions can have doctests, run by ",(0,i.jsx)(n.code,{children:"run-tests.py test-doctest.py"}),".\nSee ",(0,i.jsx)(n.a,{href:"https://github.com/facebook/sapling/commit/D8221079",children:(0,i.jsx)(n.code,{children:"D822107"})})," for an example."]})]})}function h(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},50065:function(e,n,s){s.d(n,{Z:function(){return d},a:function(){return r}});var t=s(67294);let i={},o=t.createContext(i);function r(e){let n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);