load("@fbcode_macros//build_defs:rust_binary.bzl", "rust_binary")
load("@fbcode_macros//build_defs/lib:rust_oss.bzl", "rust_oss")
load("//fbpkg:fbpkg.bzl", "fbpkg")
load("//tupperware/cm/antlir2/bzl:buck2_container.bzl", "tw")

oncall("scm_server_infra")

rust_binary(
    name = "git_bundle_generator",
    srcs = glob(["src/**/*.rs"]),
    named_deps = {
        "slog": "//common/rust/shed/tracing_slog_compat:tracing_slog_compat",
    } | ({} if rust_oss.is_oss_build() else {
    }),
    test_deps = [],
    deps = [
        "fbsource//third-party/rust:anyhow",
        "fbsource//third-party/rust:async-trait",
        "fbsource//third-party/rust:clap",
        "fbsource//third-party/rust:futures",
        "fbsource//third-party/rust:gix-hash",
        "fbsource//third-party/rust:rand",
        "fbsource//third-party/rust:sha1",
        "fbsource//third-party/rust:tokio",
        "fbsource//third-party/rust:uuid",
        "//cerberus/client/rust:cerberus_client",
        "//common/rust/shed/cloned:cloned",
        "//common/rust/shed/fbinit:fbinit",
        "//common/rust/shed/futures_stats:futures_stats",
        "//eden/mononoke/cmdlib:environment",
        "//eden/mononoke/cmdlib/caching:cmdlib_caching",
        "//eden/mononoke/cmdlib/mononoke_app:mononoke_app",
        "//eden/mononoke/cmdlib/sharding:executor_lib",
        "//eden/mononoke/cmdlib/sharding_ext:sharding_ext",
        "//eden/mononoke/common/scuba_ext:scuba_ext",
        "//eden/mononoke/git/bundle_uri:bundle_uri",
        "//eden/mononoke/git/packfile:packfile",
        "//eden/mononoke/git/protocol:protocol",
        "//eden/mononoke/metaconfig:metaconfig_types",
        "//eden/mononoke/mononoke_api:mononoke_api",
        "//eden/mononoke/mononoke_macros:mononoke_macros",
        "//manifold/clients/rust:manifold_client",
    ] + ([] if rust_oss.is_oss_build() else [
        "//configerator/structs/privacy/data_schema/if:protocol-rust",
    ]),
)

tw.container(
    name = "tw.mononoke.git_bundle_generator",
    features = [
        tw.build_fbpkg(
            fbpkg.builder(
                name = "mononoke.git_bundle_generator",
                path_actions = {
                    "git_bundle_generator": ":git_bundle_generator",
                },
            ),
        ),
        tw.fetch_fbpkg(
            name = "manifold.cli",
            repo_committed_tag = "prod",
        ),
    ],
    oncall = "scm_server_infra",
)
