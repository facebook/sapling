load("@fbcode_macros//build_defs:rust_binary.bzl", "rust_binary")
load("@fbcode_macros//build_defs/lib:rust_oss.bzl", "rust_oss")
load("@fbsource//tools/build_defs:glob_defs.bzl", "glob")

oncall("mononoke")

rust_binary(
    name = "newadmin",
    srcs = glob([
        "src/**/*.rs",
        "schemas/**/*.sql",
    ]),
    autocargo = {
        "cargo_toml_config": {
            "dependencies_override": {
                "dependencies": {
                    "dag-types": {"features": [
                        "for-tests",
                        "serialize-abomonation",
                    ]},
                },
            },
            "extra_buck_dependencies": {
                # This rule already depends on dag-lite, but it doesn't have a
                # generated Cargo.toml file. Instead depend on dag and enable
                # only lite features on it.
                "dependencies": [
                    "//eden/scm/lib/dag:dag",
                    "//eden/scm/lib/dag/dag-types:dag-types",
                ],
            },
        },
    },
    test_deps = [
        "fbsource//third-party/rust:maplit",
        "//common/rust/shed/fbinit:fbinit-tokio",
        "//eden/mononoke/repo_factory:test_repo_factory",
        "//eden/mononoke/tests/utils:tests_utils",
    ],
    deps = [
        "fbsource//third-party/rust:anyhow",
        "fbsource//third-party/rust:async-stream",
        "fbsource//third-party/rust:async-trait",
        "fbsource//third-party/rust:bytes",
        "fbsource//third-party/rust:chrono",
        "fbsource//third-party/rust:clap",
        "fbsource//third-party/rust:flate2",
        "fbsource//third-party/rust:futures",
        "fbsource//third-party/rust:gix-hash",
        "fbsource//third-party/rust:gix-object",
        "fbsource//third-party/rust:itertools",
        "fbsource//third-party/rust:prettytable-rs",
        "fbsource//third-party/rust:regex",
        "fbsource//third-party/rust:serde_json",
        "fbsource//third-party/rust:slog",
        "fbsource//third-party/rust:smallvec",
        "fbsource//third-party/rust:tokio",
        "fbsource//third-party/rust:tokio-util",
        "fbsource//third-party/rust:vec1",
        "fbsource//third-party/rust:walkdir",
        "//common/rust/shed/cachelib_stub:cachelib",
        "//common/rust/shed/cloned:cloned",
        "//common/rust/shed/facet:facet",
        "//common/rust/shed/fbinit:fbinit",
        "//common/rust/shed/futures_stats:futures_stats",
        "//common/rust/shed/memcache_stub:memcache",
        "//eden/mononoke/blobrepo:changeset_fetcher",
        "//eden/mononoke/blobrepo:repo_blobstore",
        "//eden/mononoke/blobstore:blobstore",
        "//eden/mononoke/blobstore:cacheblob",
        "//eden/mononoke/blobstore:ephemeral_blobstore",
        "//eden/mononoke/bonsai_git_mapping:bonsai_git_mapping",
        "//eden/mononoke/bonsai_globalrev_mapping:bonsai_globalrev_mapping",
        "//eden/mononoke/bonsai_hg_mapping:bonsai_hg_mapping",
        "//eden/mononoke/bonsai_svnrev_mapping:bonsai_svnrev_mapping",
        "//eden/mononoke/bonsai_tag_mapping:bonsai_tag_mapping",
        "//eden/mononoke/bookmarks:bookmarks",
        "//eden/mononoke/bookmarks:bookmarks_movement",
        "//eden/mononoke/bulkops:bulkops",
        "//eden/mononoke/changesets:changesets",
        "//eden/mononoke/changesets/changesets_creation:changesets_creation",
        "//eden/mononoke/cmdlib:environment",
        "//eden/mononoke/cmdlib/commit_id:commit_id",
        "//eden/mononoke/cmdlib/displaying:cmdlib_displaying",
        "//eden/mononoke/cmdlib/displaying/graph:print_graph",
        "//eden/mononoke/cmdlib/mononoke_app:mononoke_app",
        "//eden/mononoke/cmdlib/scrubbing:cmdlib_scrubbing",
        "//eden/mononoke/common/rendezvous:rendezvous",
        "//eden/mononoke/common/rust/caching_ext:caching_ext",
        "//eden/mononoke/common/rust/sql_ext:sql_ext",
        "//eden/mononoke/common/sql_construct:sql_construct",
        "//eden/mononoke/derived_data:changeset_info",
        "//eden/mononoke/derived_data:derived_data",
        "//eden/mononoke/derived_data:derived_data_manager",
        "//eden/mononoke/derived_data:derived_data_utils",
        "//eden/mononoke/derived_data:fsnodes",
        "//eden/mononoke/derived_data:skeleton_manifest",
        "//eden/mononoke/derived_data:unodes",
        "//eden/mononoke/derived_data/mercurial_derivation:mercurial_derivation",
        "//eden/mononoke/features/redaction:redaction",
        "//eden/mononoke/filenodes:filenodes",
        "//eden/mononoke/filestore:filestore",
        "//eden/mononoke/git/git_types:git_types",
        "//eden/mononoke/git/packfile:packfile",
        "//eden/mononoke/git_symbolic_refs:git_symbolic_refs",
        "//eden/mononoke/manifest:manifest",
        "//eden/mononoke/megarepo_api:async_requests",
        "//eden/mononoke/megarepo_api:megarepo_api",
        "//eden/mononoke/megarepo_api:megarepo_error",
        "//eden/mononoke/mercurial:mercurial_types",
        "//eden/mononoke/metaconfig:metaconfig_types",
        "//eden/mononoke/mononoke_api:mononoke_api",
        "//eden/mononoke/mononoke_types:mononoke_types",
        "//eden/mononoke/mutable_counters:mutable_counters",
        "//eden/mononoke/mutable_renames:mutable_renames",
        "//eden/mononoke/phases:phases",
        "//eden/mononoke/pushrebase:pushrebase",
        "//eden/mononoke/pushrebase_mutation_mapping:pushrebase_mutation_mapping",
        "//eden/mononoke/repo_attributes/commit_graph/buffered_commit_graph_storage:buffered_commit_graph_storage",
        "//eden/mononoke/repo_attributes/commit_graph/caching_commit_graph_storage:caching_commit_graph_storage",
        "//eden/mononoke/repo_attributes/commit_graph/commit_graph:commit_graph",
        "//eden/mononoke/repo_attributes/commit_graph/commit_graph_types:commit_graph_types",
        "//eden/mononoke/repo_attributes/commit_graph/preloaded_commit_graph_storage:preloaded_commit_graph_storage",
        "//eden/mononoke/repo_attributes/commit_graph/sql_commit_graph_storage:sql_commit_graph_storage",
        "//eden/mononoke/repo_attributes/repo_bookmark_attrs:repo_bookmark_attrs",
        "//eden/mononoke/repo_attributes/repo_cross_repo:repo_cross_repo",
        "//eden/mononoke/repo_attributes/repo_derived_data:repo_derived_data",
        "//eden/mononoke/repo_attributes/repo_identity:repo_identity",
        "//eden/mononoke/repo_attributes/repo_lock:repo_lock",
        "//eden/mononoke/revset:revset",
        "//eden/mononoke/scs/if:source_control-rust",
        "//eden/mononoke/server/context:context",
        "//thrift/lib/rust:fbthrift",
    ] + ([] if rust_oss.is_oss_build() else [
        "fbsource//third-party/rust:serde",
        "//eden/mononoke/blobstore:blobstore_factory",
        "//eden/mononoke/blobstore:fileblob",
        "//eden/mononoke/blobstore:redactedblobstore",
        "//eden/mononoke/common/bounded_traversal:bounded_traversal",
        "//eden/mononoke/repo_attributes/bonsai_blob_mapping:bonsai_blob_mapping",
        "//eden/mononoke/repo_attributes/deletion_log:deletion_log",
    ]),
)
