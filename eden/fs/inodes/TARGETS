load("@fbcode_macros//build_defs:cpp_library.bzl", "cpp_library")

oncall("scm_client_infra")

cpp_library(
    name = "fs_channel",
    headers = ["FsChannel.h"],
    exported_deps = [
        "//eden/fs/utils:fs_channel_types",
        "//eden/fs/utils:immediate_future",
    ],
)

cpp_library(
    name = "inode_number",
    srcs = ["InodeNumber.cpp"],
    headers = ["InodeNumber.h"],
    deps = [
        "//folly:conv",
    ],
    exported_deps = [
        "fbsource//third-party/fmt:fmt",
        "//folly/logging:logging",
    ],
)

cpp_library(
    name = "request_context",
    srcs = ["RequestContext.cpp"],
    headers = ["RequestContext.h"],
    deps = [
        "//eden/fs/utils:system_error",
        "//folly/logging:logging",
    ],
    exported_deps = [
        "//eden/fs/store:context",
        "//eden/fs/telemetry:telemetry",
        "//eden/fs/utils:process_access_log",
        "//folly/futures:core",
    ],
)

cpp_library(
    name = "inode_catalog",
    headers = ["InodeCatalog.h"],
    exported_deps = [
        ":inode_number",
        "//eden/fs/inodes/overlay:overlay_checker_util",
        "//eden/fs/inodes/overlay:serialization-cpp2-types",
        "//eden/fs/model:model",
        "//eden/fs/utils:immediate_future",
        "//eden/fs/utils:path",
        "//eden/fs/utils:utils",
    ],
)

cpp_library(
    name = "file_content_store",
    headers = ["FileContentStore.h"],
    exported_deps = [
        ":inode_number",
        "//eden/fs/utils:path",
        "//folly:range",
    ],
)

cpp_library(
    name = "inodes",
    srcs = [
        "CheckoutAction.cpp",
        "CheckoutContext.cpp",
        "DeferredDiffEntry.cpp",
        "DirEntry.cpp",
        "EdenDispatcherFactory.cpp",
        "EdenMount.cpp",
        "EdenMountHandle.cpp",
        "FileInode.cpp",
        "FuseDispatcherImpl.cpp",
        "GlobNode.cpp",
        "InodeBase.cpp",
        "InodeError.cpp",
        "InodeMap.cpp",
        "InodePtr.cpp",
        "NfsDispatcherImpl.cpp",
        "Overlay.cpp",
        "OverlayFile.cpp",
        "OverlayFileAccess.cpp",
        "PathError.cpp",
        "PrjfsDispatcherImpl.cpp",
        "ServerState.cpp",
        "Traverse.cpp",
        "TreeInode.cpp",
        "TreePrefetchLease.cpp",
        "VirtualInode.cpp",
    ],
    headers = [
        "CacheHint.h",
        "CheckoutAction.h",
        "CheckoutContext.h",
        "DeferredDiffEntry.h",
        "DirEntry.h",
        "EdenDispatcherFactory.h",
        "EdenMount.h",
        "EdenMountError.h",
        "EdenMountHandle.h",
        "FileInode.h",
        "FuseDispatcherImpl.h",
        "GlobNode.h",
        "InodeBase.h",
        "InodeError.h",
        "InodeMap.h",
        "InodePtr.h",
        "InodePtr-defs.h",
        "InodePtrFwd.h",
        "InodeTable.h",
        "NfsDispatcherImpl.h",
        "Overlay.h",
        "OverlayFile.h",
        "OverlayFileAccess.h",
        "ParentInodeInfo.h",
        "PathError.h",
        "PrjfsDispatcherImpl.h",
        "ServerState.h",
        "Traverse.h",
        "TreeInode.h",
        "TreePrefetchLease.h",
        "UnmaterializedUnloadedBlobDirEntry.h",
        "VirtualInode.h",
        "VirtualInodeLoader.h",
    ],
    deps = [
        "fbsource//third-party/cpptoml:cpptoml",
        "fbsource//third-party/fmt:fmt",
        ":file_content_store",
        "//eden/common/utils:synchronized",
        "//eden/fs/digest:blake3_hash",
        "//eden/fs/inodes/memcatalog:meminodecatalog",
        "//eden/fs/inodes/sqlitecatalog:bufferedsqliteinodecatalog",
        "//eden/fs/inodes/sqlitecatalog:sqliteinodecatalog",
        "//eden/fs/journal:journal",
        "//eden/fs/nfs:dirlist",
        "//eden/fs/nfs:nfs_server",
        "//eden/fs/nfs:nfs_utils",
        "//eden/fs/nfs:nfsd3",
        "//eden/fs/nfs:nfsd_rpc",
        "//eden/fs/privhelper:interface",
        "//eden/fs/service:pretty_printers",
        "//eden/fs/service:thrift_util",
        "//eden/fs/sqlite:sqlite",
        "//eden/fs/store:backing_store_interface",
        "//eden/fs/telemetry:fs_event_logger",
        "//eden/fs/telemetry:hive_logger",
        "//eden/fs/telemetry:log_info",
        "//eden/fs/telemetry:task_trace",
        "//eden/fs/utils:clock",
        "//eden/fs/utils:eden_error",
        "//eden/fs/utils:enum",
        "//eden/fs/utils:file_hash",
        "//eden/fs/utils:file_utils",
        "//eden/fs/utils:fs_channel_types",
        "//eden/fs/utils:match",
        "//eden/fs/utils:nfs_socket",
        "//eden/fs/utils:process",
        "//eden/fs/utils:system_error",
        "//folly:exception",
        "//folly:fbstring",
        "//folly:file_util",
        "//folly:likely",
        "//folly:string",
        "//folly:unit",
        "//folly/chrono:conv",
        "//folly/executors:queued_immediate_executor",
        "//folly/io:iobuf",
        "//folly/io/async:async_base",
        "//folly/portability:openssl",
        "//folly/system:pid",
        "//folly/system:thread_name",
        "//thrift/lib/cpp2/protocol:protocol",
    ],
    exported_deps = [
        ":fs_channel",
        ":inode_metadata",
        ":inode_number",
        "//eden/common/utils:file_utils",
        "//eden/fs/config:config",
        "//eden/fs/config:config_thrift-cpp2-types",
        "//eden/fs/fuse:fuse",
        "//eden/fs/inodes/fscatalog:fsinodecatalog",
        "//eden/fs/inodes/overlay:overlay_checker",
        "//eden/fs/inodes/overlay:serialization-cpp2-types",
        "//eden/fs/model:model",
        "//eden/fs/model:model-fwd",
        "//eden/fs/model/git:gitignore",
        "//eden/fs/nfs:dispatcher",
        "//eden/fs/prjfs:prjfs",
        "//eden/fs/service:thrift-cpp2-types",
        "//eden/fs/store:context",
        "//eden/fs/store:store",
        "//eden/fs/takeover:serialization-cpp2-types",
        "//eden/fs/takeover:takeover",
        "//eden/fs/telemetry:activity_buffer",
        "//eden/fs/telemetry:activity_recorder",
        "//eden/fs/telemetry:structured_logger",
        "//eden/fs/telemetry:telemetry",
        "//eden/fs/utils:bufvec",
        "//eden/fs/utils:case_sensitivity",
        "//eden/fs/utils:glob",
        "//eden/fs/utils:immediate_future",
        "//eden/fs/utils:path",
        "//eden/fs/utils:ref_ptr",
        "//eden/fs/utils:static_assert",
        "//eden/fs/utils:string",
        "//eden/fs/utils:user_info",
        "//eden/fs/utils:utils",
        "//folly:cancellation_token",
        "//folly:exception_wrapper",
        "//folly:expected",
        "//folly:fbvector",
        "//folly:file",
        "//folly:map_util",
        "//folly:portability",
        "//folly:range",
        "//folly:shared_mutex",
        "//folly:stop_watch",
        "//folly:synchronized",
        "//folly:thread_local",
        "//folly/container:evicting_cache_map",
        "//folly/functional:invoke",
        "//folly/futures:core",
        "//folly/futures:shared_promise",
        "//folly/logging:logging",
        "//folly/portability:gflags",
        "//folly/portability:sys_uio",
        "//folly/synchronization:baton",
    ],
    external_deps = [
        "boost",
        ("boost", None, "boost_filesystem"),
    ],
)

cpp_library(
    name = "inode_metadata",
    srcs = [
        "InodeMetadata.cpp",
        "InodeTimestamps.cpp",
    ],
    headers = [
        "InodeMetadata.h",
        "InodeTimestamps.h",
    ],
    deps = [
        "//eden/fs/utils:clock",
        "//eden/fs/utils:fs_channel_types",
        "//eden/fs/utils:throw",
        "//folly:conv",
    ],
    exported_deps = [
        "//eden/fs/utils:utils",
        "//folly/portability:sys_stat",
        "//folly/portability:sys_types",
    ],
    exported_external_deps = [
        ("glibc", None, "rt"),
    ],
)
