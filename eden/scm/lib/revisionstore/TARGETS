load("@fbcode_macros//build_defs:rust_library.bzl", "rust_library")
load("@fbcode_macros//build_defs/lib:rust_oss.bzl", "rust_oss")
load("@fbsource//tools/build_defs:glob_defs.bzl", "glob")

oncall("mercurial_release")

rust_library(
    name = "revisionstore",
    srcs = glob(["src/**/*.rs"]),
    autocargo = {
        "cargo_toml_config": {
            "dependencies_override": {
                "dependencies": {
                    "minibytes": {"features": ["frombytes"]},
                    "version": {"path": "../version"},
                },
            },
            "extra_buck_dependencies": {
                "dependencies": [
                    "fbsource//third-party/rust:blake3",
                    "//common/rust/shed/fbinit:fbinit",
                    "//common/rust/shed/stats:stats",
                ],
            },
            "features": {
                "default": [],
                "fb": [],
                "for-tests": [],
                "ods": [
                    "fbinit",
                    "stats",
                ],
            },
        },
    },
    crate_root = "src/lib.rs",
    features = [
        "fb",
        "for-tests",
    ],
    named_deps = {
        "blake3-constant": "//blake3:blake3-constants-rust",
    },
    test_deps = [
        "fbsource//third-party/rust:maplit",
        "fbsource//third-party/rust:mockito",
        "fbsource//third-party/rust:quickcheck",
        "fbsource//third-party/rust:rand_chacha",
    ],
    # A test inside this target is using #[should_panic], setting the backtrace
    # to false here, otherwise the test binary will try to extract the backtrace
    # and the test will fail with leak sanatizer.
    test_env = {"RUST_BACKTRACE": "0"},
    test_labels = ["tpx-rust-no-backtrace-workaround"],
    deps = [
        "fbsource//third-party/rust:anyhow",
        "fbsource//third-party/rust:async-trait",
        "fbsource//third-party/rust:blake2",
        "fbsource//third-party/rust:byteorder",
        "fbsource//third-party/rust:crossbeam",
        "fbsource//third-party/rust:curl",
        "fbsource//third-party/rust:futures",
        "fbsource//third-party/rust:hex",
        "fbsource//third-party/rust:http",
        "fbsource//third-party/rust:memmap2",
        "fbsource//third-party/rust:parking_lot",
        "fbsource//third-party/rust:quickcheck",
        "fbsource//third-party/rust:rand",
        "fbsource//third-party/rust:regex",
        "fbsource//third-party/rust:serde",
        "fbsource//third-party/rust:serde_derive",
        "fbsource//third-party/rust:serde_json",
        "fbsource//third-party/rust:sha1",
        "fbsource//third-party/rust:sha2",
        "fbsource//third-party/rust:tempfile",
        "fbsource//third-party/rust:thiserror",
        "fbsource//third-party/rust:tokio",
        "fbsource//third-party/rust:tokio-stream",
        "fbsource//third-party/rust:tracing",
        "fbsource//third-party/rust:url",
        ":revisionstore_types",
        "//common/rust/blake3_c_ffi:blake3_c_ffi",
        "//common/rust/shed/quickcheck_arbitrary_derive:quickcheck_arbitrary_derive",
        "//eden/mononoke/lfs_protocol:lfs_protocol",
        "//eden/scm/lib/async-runtime:async-runtime",
        "//eden/scm/lib/clientinfo:clientinfo",
        "//eden/scm/lib/clientinfo-async:clientinfo_async",
        "//eden/scm/lib/config/model:configmodel",
        "//eden/scm/lib/edenapi:edenapi",
        "//eden/scm/lib/edenapi/types:edenapi_types",
        "//eden/scm/lib/hg-http:hg-http",
        "//eden/scm/lib/hg-metrics:hg-metrics",
        "//eden/scm/lib/hgtime:hgtime",
        "//eden/scm/lib/http-client:http-client",
        "//eden/scm/lib/indexedlog:indexedlog",
        "//eden/scm/lib/lz4-pyframe:lz4-pyframe",
        "//eden/scm/lib/manifest-tree:manifest-tree",
        "//eden/scm/lib/mincode:mincode",
        "//eden/scm/lib/minibytes:minibytes",
        "//eden/scm/lib/mpatch:mpatch",
        "//eden/scm/lib/progress/model:progress-model",
        "//eden/scm/lib/repo_name:repo_name",
        "//eden/scm/lib/storemodel:storemodel",
        "//eden/scm/lib/storemodel/hgstore:hgstore",
        "//eden/scm/lib/types:types",
        "//eden/scm/lib/util:util",
        "//eden/scm/lib/version:rust_version",
        "//eden/scm/lib/vlqencoding:vlqencoding",
    ] + ([
        "fbsource//third-party/rust:blake3",
    ] if rust_oss.is_oss_build() else []),
)

rust_library(
    name = "revisionstore_with_ods",
    srcs = glob(["src/**/*.rs"]),
    autocargo = {
        "ignore_rule": True,
    },
    features = [
        "fb",
        "for-tests",
        "ods",
    ],
    named_deps = {
        "blake3-constant": "//blake3:blake3-constants-rust",
    },
    test_deps = [
        "fbsource//third-party/rust:maplit",
        "fbsource//third-party/rust:mockito",
        "fbsource//third-party/rust:quickcheck",
        "fbsource//third-party/rust:rand_chacha",
    ],
    # A test inside this target is using #[should_panic], setting the backtrace
    # to false here, otherwise the test binary will try to extract the backtrace
    # and the test will fail with leak sanatizer.
    test_env = {"RUST_BACKTRACE": "0"},
    test_labels = ["tpx-rust-no-backtrace-workaround"],
    deps = [
        "fbsource//third-party/rust:anyhow",
        "fbsource//third-party/rust:async-trait",
        "fbsource//third-party/rust:blake2",
        "fbsource//third-party/rust:byteorder",
        "fbsource//third-party/rust:crossbeam",
        "fbsource//third-party/rust:curl",
        "fbsource//third-party/rust:futures",
        "fbsource//third-party/rust:hex",
        "fbsource//third-party/rust:http",
        "fbsource//third-party/rust:memmap2",
        "fbsource//third-party/rust:parking_lot",
        "fbsource//third-party/rust:quickcheck",
        "fbsource//third-party/rust:rand",
        "fbsource//third-party/rust:regex",
        "fbsource//third-party/rust:serde",
        "fbsource//third-party/rust:serde_derive",
        "fbsource//third-party/rust:serde_json",
        "fbsource//third-party/rust:sha1",
        "fbsource//third-party/rust:sha2",
        "fbsource//third-party/rust:tempfile",
        "fbsource//third-party/rust:thiserror",
        "fbsource//third-party/rust:tokio",
        "fbsource//third-party/rust:tokio-stream",
        "fbsource//third-party/rust:tracing",
        "fbsource//third-party/rust:url",
        ":revisionstore_types",
        "//common/rust/blake3_c_ffi:blake3_c_ffi",
        "//common/rust/shed/fbinit:fbinit",
        "//common/rust/shed/quickcheck_arbitrary_derive:quickcheck_arbitrary_derive",
        "//common/rust/shed/stats:stats",
        "//eden/mononoke/lfs_protocol:lfs_protocol",
        "//eden/scm/lib/async-runtime:async-runtime",
        "//eden/scm/lib/clientinfo:clientinfo",
        "//eden/scm/lib/clientinfo-async:clientinfo_async",
        "//eden/scm/lib/config/model:configmodel",
        "//eden/scm/lib/edenapi:edenapi",
        "//eden/scm/lib/edenapi/types:edenapi_types",
        "//eden/scm/lib/hg-http:hg-http",
        "//eden/scm/lib/hg-metrics:hg-metrics",
        "//eden/scm/lib/hgtime:hgtime",
        "//eden/scm/lib/http-client:http-client",
        "//eden/scm/lib/indexedlog:indexedlog",
        "//eden/scm/lib/lz4-pyframe:lz4-pyframe",
        "//eden/scm/lib/manifest-tree:manifest-tree",
        "//eden/scm/lib/mincode:mincode",
        "//eden/scm/lib/minibytes:minibytes",
        "//eden/scm/lib/mpatch:mpatch",
        "//eden/scm/lib/progress/model:progress-model",
        "//eden/scm/lib/repo_name:repo_name",
        "//eden/scm/lib/storemodel:storemodel",
        "//eden/scm/lib/storemodel/hgstore:hgstore",
        "//eden/scm/lib/types:types",
        "//eden/scm/lib/util:util",
        "//eden/scm/lib/version:rust_version",
        "//eden/scm/lib/vlqencoding:vlqencoding",
    ] + ([
        "fbsource//third-party/rust:blake3",
    ] if rust_oss.is_oss_build() else []),
)

rust_library(
    name = "revisionstore_types",
    srcs = glob(["types/**/*.rs"]),
    autocargo = {
        "cargo_toml_config": {
            "package": {
                "authors": ["Facebook Source Control Team <sourcecontrol-dev@fb.com>"],
            },
        },
        "cargo_toml_dir": "types",
    },
    crate_root = "types/lib.rs",
    features = [
        "for-tests",
    ],
    test_deps = [
        "fbsource//third-party/rust:quickcheck",
        "//common/rust/shed/quickcheck_arbitrary_derive:quickcheck_arbitrary_derive",
    ],
    deps = [
        "fbsource//third-party/rust:anyhow",
        "fbsource//third-party/rust:byteorder",
        "fbsource//third-party/rust:quickcheck",
        "fbsource//third-party/rust:serde",
        "fbsource//third-party/rust:serde_derive",
        "//common/rust/shed/quickcheck_arbitrary_derive:quickcheck_arbitrary_derive",
    ],
)
