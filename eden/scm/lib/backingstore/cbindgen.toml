language = "C++"

# The "\u0065" in the header is simply the letter 'e'. This trick is to prevent
# our tools from marking this file as generated file.
header = """/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This software may be used and distributed according to the terms of the
 * GNU General Public License version 2.
 *
 * This file is generated with cbindgen. Please run `./tools/cbindgen.sh` to
 * update this file.
 *
 * @gen\u0065rated <<SignedSource::*O*zOeWoEQle#+L!plEphiEmie@IsG>>
 *
 */

// The generated functions are exported from this Rust library
// @dep=//eden/scm/lib/backingstore:backingstore
"""

trailer = """

namespace sapling {

// Some Rust functions will have the return type `CFallibleBase`, and we
// have this convenient struct to help C++ code to consume the returned
// struct. This is the only way to use the returned `CFallibleBase` from
// Rust, and the user must provide a `Deleter` to correctly free the pointer
// returned from Rust.
template <typename T, void(*dtor)(T*)>
class CFallible {
public:
  struct Deleter {
    void operator()(T* ptr) {
      dtor(ptr);
    }
  };
  using Ptr = std::unique_ptr<T, Deleter>;

  explicit CFallible(CFallibleBase&& base)
    : ptr_{reinterpret_cast<T*>(base.value)}, error_{base.error} {}

  ~CFallible() {
    if (error_) {
      sapling_cfallible_free_error(error_);
    }
  }

  bool isError() const {
    return error_ != nullptr;
  }

  char* getError() {
    return error_;
  }

  T* get() {
    return ptr_.get();
  }

  Ptr unwrap() {
    return std::move(ptr_);
  }

private:
  Ptr ptr_;
  char* error_;
};

}
"""

namespace = "sapling"
pragma_once = true
no_includes = true # avoid iostream
sys_includes = [
    "stdint.h",
    "memory",
    "string_view",
    "folly/Range.h",
]

[export]
exclude = ["CFallible"]
include = ["Tree", "TreeEntry", "TreeEntryType"]

[export.rename]

[export.body]
"CBytes" = """

  folly::ByteRange asByteRange() const {
    return folly::ByteRange(ptr, len);
  }

  operator folly::ByteRange() const {
    return asByteRange();
  }
"""

"Slice" = """
  template <typename Q = T>
  Slice(std::enable_if_t<std::is_same_v<Q, uint8_t>, std::string_view> sv) noexcept
    : ptr{reinterpret_cast<const uint8_t*>(sv.data())}, len{sv.size()} {}

  Slice(folly::Range<const T*> range) noexcept
    : ptr{range.data()}, len{range.size()} {}
"""
